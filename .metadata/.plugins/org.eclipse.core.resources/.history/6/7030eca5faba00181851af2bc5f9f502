package projectone;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Scanner;
import java.util.Vector;
import projectone.FlightMap;
import projectone.City;
import projectone.CityComparator;


public class SearchMap {
	public static Object getKeyFromValue(Map hm, Object value) {
	    for (Object o : hm.keySet()) 
	    {
	      if (hm.get(o).equals(value)) 
	      {
	        return o;
	      }
	    }
	    return null;
	}
	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		  // The name of the file to open.
        String fileName = args[0];
        String outputName = args[1];

        // This will reference one line at a time
        String line = null;
        String originCity;
        String cityOne;
        String cityTwo;
        String costFromOneToTwo;
        Vector<City> cityList = new Vector<City>();
        Hashtable<String, Integer> costHash = new Hashtable<String, Integer>();

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            originCity = bufferedReader.readLine();
            City newCity = new City();
            newCity.name = originCity;
            cityList.add(newCity);
            
            while((line = bufferedReader.readLine()) != null) {
                Scanner scan = new Scanner(line);
                cityOne = scan.next();
                cityTwo = scan.next();
                costFromOneToTwo = scan.next();
                scan.close();
                int trueCost = Integer.parseInt(costFromOneToTwo);
                costHash.put(cityOne+cityTwo, trueCost);
                
   
                found: {
	                for (int i = 0; i < cityList.size(); i++) 
	                		if (cityList.get(i).getName().equals(cityOne))
	                		{
	                			City particularCity = cityList.get(i);
	                			particularCity.getConnectedCities().put(cityTwo, trueCost);
	                			break found;
	                		}
	                City cityToAdd = new City();
	            		cityToAdd.setName(cityOne);
	            		cityToAdd.getConnectedCities().put(cityTwo, trueCost);
	            		cityList.add(cityToAdd);
                }
                
                boolean cityExists = false;
                for (int i = 0; i < cityList.size(); i++)
                {
                		if (cityList.get(i).getName().equals(cityTwo))
                		{
                			cityExists = true;
                			break;
                		}
                }
                
                if (!cityExists)
                {
                		City cityTwoAddition = new City();
                		cityTwoAddition.setName(cityTwo);
                		cityList.add(cityTwoAddition);
                }
            }   
            // Always close files.
            bufferedReader.close();  
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                  
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        
        int numberOfVertices = cityList.size();
        
        FlightMap fm = new FlightMap(numberOfVertices);
        
        fm.setOriginCity(cityList.get(0));
        //int [][]fmMap = fm.getGraphOfCities();
        Hashtable <String, Integer> stringToInt = new Hashtable<String, Integer>();
        
        Vector<String> cityStringNames = new Vector<String>(cityList.size());
        
        for (int i = 0; i < cityList.size(); i++)
        {
        		//System.out.println(cityList.get(i).getConnectedCities());
        		cityStringNames.add(cityList.get(i).getName());
        }
        
        Collections.sort(cityStringNames);
        CityComparator cc = new CityComparator();
        Collections.sort(cityList, cc);
        
        for (int i = 0; i < cityStringNames.size(); i++)
        {
        		stringToInt.put(cityStringNames.get(i), i);
        }
        
        for (int i = 0; i < cityList.size(); i++)
        {
        		String sourceString = cityList.get(i).getName();
        		
        		HashMap <String, Integer> cityHash = cityList.get(i).getConnectedCities();
        	
        		for (HashMap.Entry<String, Integer> entry : cityHash.entrySet())
        		{
        			int currentSource = stringToInt.get(sourceString);
        			int currentDestination = stringToInt.get(entry.getKey());
        			//int currentCost = entry.getValue();
      
        			fm.addEdge(currentSource, currentDestination);
        		}
        }
        
       
        int originInteger = stringToInt.get(fm.getOriginCity().getName());
        
        for (int i = 0; i < cityList.size(); i++)
        {
        		//System.out.println(originInteger + "|" + i);
        		fm.getPaths(originInteger, i);
        		
        }
        
        Vector<Integer> finalList = fm.finalCity;
        
      
        
        
        /*
        for (int i = 0; i < finalCostVector.size(); i++)
        {
        		System.out.println(finalCostVector.get(i));
        }
        */
        
        /*
        for (int i = 0; i < finalList.size(); i++)
        {
        		if (finalList.get(i) == originInteger && finalList.get(i+1) == originInteger)
        		{
        			finalList.remove(i);
        		}
        }
        */
        
        /*
        
        for (int i = 0; i < finalList.size(); i++)
        {
        		System.out.println(finalList.get(i));
        }
        
        */
        
        Vector<Integer> finalCostVector = new Vector<Integer>();
        
        for (int i = 0; i < finalList.size(); i++)
        {
        		int finalCost = 0; 
        		while (finalList.get(i) != 999)
        		{
        			 
        			String c1 = (String) getKeyFromValue(stringToInt, finalList.get(i));
        			String c2 = (String) getKeyFromValue(stringToInt, finalList.get(i+1));
        			
        			if (c2 == null)
        			{
        				break;
        			}
        			
        			String oneAndTwo = c1 + c2;
        			
        			finalCost += costHash.get(oneAndTwo);
        			
        			i++;
        		}
        		finalCostVector.add(finalCost);
        }
        for (int i = 0; i < finalCostVector.size(); i++)
        {
        		if (finalCostVector.get(i) == originInteger)
        		{
        			finalCostVector.remove(i);
        		}
        }
        
        for (int i = 0; i < finalList.size(); i++)
        {
        		if (finalList.get(i) == 999)
        		{
        			finalList.remove(i);
        		}
        		
        }
        
        Vector<String> finalListStrings = new Vector<String>();
        
        for (int i = 0; i < finalList.size(); i++)
        {
        	 	finalListStrings.add((String) (getKeyFromValue(stringToInt, finalList.get(i))));  
        }
        
        
        for (int j = 0; j < finalListStrings.size(); j++)
        {
        		if (finalListStrings.get(j).equals(fm.originCity.name))
        		{
        			System.out.println();
        			
        		}
        		else
        		{
        			System.out.print(finalListStrings.get(j) + ",");
        		}
        }


        
        PrintWriter writer = new PrintWriter(outputName, "UTF-8");
        writer.println("Path from Origin");
        for (int j = 0; j < finalListStrings.size(); j++)
        {
        		if (finalListStrings.get(j).equals(fm.originCity.name))
        		{
        			writer.println();
        			writer.print(fm.originCity.name + ",");
        			
        		}
        		else
        		{
        			writer.print(finalListStrings.get(j) + ",");
        		}
        }
        writer.println();
        writer.println("Total Cost of Trip");
        for (int i = 0; i < finalCostVector.size(); i++)
        {
        		writer.println(finalCostVector.get(i));
        }
       
        writer.close();
}
}

